package Tests;

import static io.restassured.RestAssured.given;

import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.*;

import org.junit.Before;
import org.junit.Test;

import Utils.Movimentacao;
import core.BaseTest;

public class BarrigaAPITests extends BaseTest{
	
	private String TOKEN;
	
	private static String NOME_CONTA = "CONTA" + System.nanoTime();
	private static Integer CONTA_ID;
	
	@Before
	public void login() {
		Map<String, String> login = new HashMap<String, String>();
		login.put("email", "cjunior.66@icloud.com");
		login.put("senha", "123456789");
		
		TOKEN = given()
			.body(login)
		.when()
			.post("/signin")
		.then()
			.statusCode(200)
			.extract().path("token")
		;
	}
	
	@Test
	public void naoDeveAcessarAPISemToken() {
		given()
	.when()
		.get("/contas")
	.then()
		.statusCode(401)
	;
		
	}
	

	@Test
	public void deveIncluirUmaContaComSucesso() {
		CONTA_ID = given()
			.header("Authorization", "JWT " + TOKEN)
			.body("{\"nome\": \"" + NOME_CONTA + "\"}")
		.when()
			.post("/contas")
		.then()
			.log().all()
			.statusCode(201)
			.extract().path("id")
			;

	}
	
	@Test
	public void deveAlterarUmaContaComSucesso() {	
		given()
			.header("Authorization", "JWT " + TOKEN)
			.body("{\"nome\": \"" + NOME_CONTA + " Alterado\"}")
			.pathParam("id", CONTA_ID)
		.when()
			.put("/contas/{id}")
		.then()
			.statusCode(200)
			.body("nome", is("CarlosAlterado"))
		;

	}
	
	@Test
	public void naoDeveIncluirUmaContaComNomeRepetido() {
		given()
			.header("Authorization", "JWT " + TOKEN)
			.body("{\"nome\": \"" + NOME_CONTA + "\"}")
		.when()
			.post("/contas")
		.then()
			.statusCode(400)
			.body("error", is("Já existe uma conta com esse nome!"))
		;

	}
	
	@Test
	public void deveInserirMovimentacaoComSucesso() {
		Movimentacao mov = new Movimentacao();
		mov.setConta_id(2130883);
		mov.setDescricao("Descricao da movimentacao");
		mov.setEnvolvido("Carlos Inc.");
		mov.setTipo("REC");
		mov.setData_transacao("19/05/2024");
		mov.setData_pagamento("20/05/2024");
		mov.setValor(1088900f);
		mov.setStatus(true);

		given()
			.header("Authorization", "JWT " + TOKEN)
			.body(mov)
		
		.when()
			.post("/transacoes")
		.then()
		.log().all()
		.statusCode(201)
		;

	}
	
	@Test
	public void naoDeveCadastrarMovimentacaoFutura() {
		Movimentacao mov = new Movimentacao();
		mov.setConta_id(CONTA_ID);
		mov.setDescricao("Descricao da movimentacao");
		mov.setEnvolvido("Carlos Inc.");
		mov.setTipo("REC");
		mov.setData_transacao("25/05/2025");
		mov.setData_pagamento("20/05/2024");
		mov.setValor(10000f);
		mov.setStatus(true);

		given()
			.header("Authorization", "JWT " + TOKEN)
			.body(mov)
		.when()
			.post("/transacoes")
		.then()
			.statusCode(400)
			.body("msg", hasItem("Data da Movimentação deve ser menor ou igual à data atual"))
		;

	}
	
	@Test
	public void naoDeveRemoverUmaContaComMovimentacao() {
		given()
			.header("Authorization", "JWT " + TOKEN)
		.when()
			.delete("/contas/2130883")
		.then()
			.statusCode(500)
			.body("detail", is("Key (id)=(2130883) is still referenced from table \"transacoes\"."))
		;

	}
	
	@Test
	public void deveCalcularSaldoDaConta() {
		given()
			.header("Authorization", "JWT " + TOKEN)
		.when()
			.get("/saldo")
		.then()
			.statusCode(200)
			.body("find{it.conta_id == 2127006}.saldo", is("30000.00"));

	}
	
	@Test
	public void deveRemoverMovimentacao() {
		given()
			.header("Authorization", "JWT " + TOKEN)
		.when()
			.delete("/transacoes/1998455")
		.then()
			.statusCode(204)
		;

	}
}
